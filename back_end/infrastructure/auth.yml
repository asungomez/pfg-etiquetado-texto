service: authentication

provider:
  name: aws
  profile: ${opt:aws-profile}
  region: ${opt:region}
  deploymentBucket:
    name: ${env:APP_NAME}-deployment-bucket
  stackName: ${env:APP_NAME}-authentication

custom:
  customMessageFunctionName: ${env:APP_NAME}-custom-message
  customMessageFunctionArn: arn:aws:lambda:${opt:region}:${aws:accountId}:function:${self:custom.customMessageFunctionName}

resources:
  Resources:
    AuthRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: ${env:APP_NAME}-auth-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: ''
              Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: 'sts:AssumeRoleWithWebIdentity'
    UnauthRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: ${env:APP_NAME}-unauth-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: ''
              Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: 'sts:AssumeRoleWithWebIdentity'
    CustomMessageConfirmationBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:APP_NAME}-verification-bucket
        AccessControl: Private
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - Authorization
                - Content-Length
              AllowedMethods:
                - GET
              AllowedOrigins:
                - '*'
              MaxAge: '3000'
    SNSRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${env:APP_NAME}-sns-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: ''
              Effect: Allow
              Principal:
                Service: cognito-idp.amazonaws.com
              Action:
                - sts:AssumeRole
              Condition:
                StringEquals:
                  sts:ExternalId: ${env:APP_NAME}-sts-id
        Policies:
          - PolicyName: ${env:APP_NAME}-sns-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource: '*'
    UserPool:
      Type: AWS::Cognito::UserPool
      UpdateReplacePolicy: Retain
      Properties:
        UserPoolName: ${env:APP_NAME}-user-pool
        Schema:
          - Name: email
            Required: 'true'
            Mutable: 'true'
        LambdaConfig:
          CustomMessage: ${self:custom.customMessageFunctionArn}
        AutoVerifiedAttributes: 
          - email
        EmailVerificationMessage: "Your verification code is {####}"
        EmailVerificationSubject: "Your verification code"
        Policies:
          PasswordPolicy:
            MinimumLength: 12
            RequireLowercase: 'true'
            RequireNumbers: 'true'
            RequireSymbols: 'true'
            RequireUppercase: 'true'
        UsernameAttributes: 
          - email
        MfaConfiguration: "OFF"
        SmsVerificationMessage: "Your verification code is {####}"
        SmsConfiguration:
          SnsCallerArn:
            Fn::GetAtt:
              - SNSRole
              - Arn
          ExternalId: ${env:APP_NAME}-sts-id
    UserPoolClientWeb:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${env:APP_NAME}-client-app
        RefreshTokenValidity: 30
        UserPoolId:
          Ref: UserPool
      DependsOn: UserPool
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${env:APP_NAME}-client-cf
        GenerateSecret: 'true'
        RefreshTokenValidity: 30
        UserPoolId:
          Ref: UserPool
      DependsOn: UserPool
    UserPoolClientRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${env:APP_NAME}-user-pool-client-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      DependsOn: UserPoolClient
    UserPoolClientLambda:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          ZipFile:
            Fn::Join:
              - ''
              - - const response = require('cfn-response');
                - const aws = require('aws-sdk');
                - const identity = new aws.CognitoIdentityServiceProvider();
                - exports.handler = (event, context, callback) => {
                - ' if (event.RequestType == ''Delete'') { '
                - '   response.send(event, context, response.SUCCESS, {})'
                - ' }'
                - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
                - '   const params = {'
                - '     ClientId: event.ResourceProperties.clientId,'
                - '     UserPoolId: event.ResourceProperties.userpoolId'
                - '   };'
                - '   identity.describeUserPoolClient(params).promise()'
                - '     .then((res) => {'
                - '       response.send(event, context, response.SUCCESS, {''appSecret'': res.UserPoolClient.ClientSecret});'
                - '     })'
                - '     .catch((err) => {'
                - '       response.send(event, context, response.FAILED, {err});'
                - '     });'
                - ' }'
                - '};'
        Handler: index.handler
        Runtime: nodejs12.x
        Timeout: '300'
        Role:
          Fn::GetAtt:
            - UserPoolClientRole
            - Arn
      DependsOn: UserPoolClientRole
    UserPoolClientLambdaPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: ${env:APP_NAME}-userpoolclient-lambda-iam-policy
        Roles:
          - Ref: UserPoolClientRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:DescribeUserPoolClient
              Resource:
                Fn::GetAtt:
                  - UserPool
                  - Arn
      DependsOn: UserPoolClientLambda
    UserPoolClientLogPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: ${env:APP_NAME}-userpoolclient-lambda-log-policy
        Roles:
          - Ref: UserPoolClientRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                Fn::Sub:
                  - >-
                    arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                  - region:
                      Ref: AWS::Region
                    account:
                      Ref: AWS::AccountId
                    lambda:
                      Ref: UserPoolClientLambda
      DependsOn: UserPoolClientLambdaPolicy
    UserPoolClientInputs:
      Type: Custom::LambdaCallout
      Properties:
        ServiceToken:
          Fn::GetAtt:
            - UserPoolClientLambda
            - Arn
        clientId:
          Ref: UserPoolClient
        userpoolId:
          Ref: UserPool
      DependsOn: UserPoolClientLogPolicy
    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${env:APP_NAME}-identity-pool
        CognitoIdentityProviders:
          - ClientId:
              Ref: UserPoolClient
            ProviderName:
              Fn::Sub:
                - cognito-idp.${region}.amazonaws.com/${client}
                - region:
                    Ref: AWS::Region
                  client:
                    Ref: UserPool
          - ClientId:
              Ref: UserPoolClientWeb
            ProviderName:
              Fn::Sub:
                - cognito-idp.${region}.amazonaws.com/${client}
                - region:
                    Ref: AWS::Region
                  client:
                    Ref: UserPool
        AllowUnauthenticatedIdentities: 'true'
      DependsOn: UserPoolClientInputs
    IdentityPoolRoleMap:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          unauthenticated:
            Fn::GetAtt:
              - AuthRole
              - Arn
          authenticated:
            Fn::GetAtt:
              - UnauthRole
              - Arn
      DependsOn: 
        - IdentityPool
        - AuthRole
        - UnauthRole
  Outputs:
    UserPoolId:
      Description: User Pool ID
      Value: !Ref UserPool 
    IdentityPoolId:
      Description: Identity Pool ID
      Value: !Ref IdentityPool
    UserPoolClientWeb:
      Description: User pool client for web application
      Value: !Ref UserPoolClientWeb
    AuthRoleArn:
      Description: Identity pool authenticated role
      Value: Fn::GetAtt:
        - AuthRole
        - Arn
